# Script Final de Pruebas - Banco Agricultura Salvadore√±o
# Pruebas sistem√°ticas de todos los endpoints

$baseUrl = "http://localhost:8081"

Write-Host "üöÄ INICIANDO PRUEBAS SISTEM√ÅTICAS DE ENDPOINTS" -ForegroundColor Magenta
Write-Host "================================================" -ForegroundColor Cyan

# 1. Health Check
Write-Host "`n1. üè• VERIFICANDO SALUD DEL SISTEMA" -ForegroundColor Yellow
try {
    $health = Invoke-RestMethod -Uri "$baseUrl/actuator/health" -Method GET
    Write-Host "‚úÖ Sistema saludable: $($health.status)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error en health check: $($_.Exception.Message)" -ForegroundColor Red
}

# 2. Autenticaci√≥n
Write-Host "`n2. üîê PRUEBAS DE AUTENTICACI√ìN" -ForegroundColor Yellow

# Login admin
try {
    $loginAdmin = Invoke-RestMethod -Uri "$baseUrl/api/auth/login" -Method POST -ContentType "application/json" -Body '{"username":"admin","password":"admin2025"}'
    Write-Host "‚úÖ Login admin exitoso: $($loginAdmin.success)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error login admin: $($_.Exception.Message)" -ForegroundColor Red
}

# Login cliente
try {
    $loginCliente = Invoke-RestMethod -Uri "$baseUrl/api/auth/login" -Method POST -ContentType "application/json" -Body '{"username":"cliente","password":"admin2025"}'
    Write-Host "‚úÖ Login cliente exitoso: $($loginCliente.success)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error login cliente: $($_.Exception.Message)" -ForegroundColor Red
}

# Login inv√°lido
try {
    $loginInvalido = Invoke-RestMethod -Uri "$baseUrl/api/auth/login" -Method POST -ContentType "application/json" -Body '{"username":"invalido","password":"123"}'
    Write-Host "‚ö†Ô∏è Login inv√°lido deber√≠a fallar pero devolvi√≥: $($loginInvalido.success)" -ForegroundColor Yellow
} catch {
    Write-Host "‚úÖ Login inv√°lido fall√≥ correctamente (401)" -ForegroundColor Green
}

# 3. Usuarios
Write-Host "`n3. üë• PRUEBAS DE USUARIOS" -ForegroundColor Yellow
try {
    $usuarios = Invoke-RestMethod -Uri "$baseUrl/api/usuarios" -Method GET
    Write-Host "‚úÖ Usuarios obtenidos: $($usuarios.Count) usuarios" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error obteniendo usuarios: $($_.Exception.Message)" -ForegroundColor Red
}

# 4. Cuentas
Write-Host "`n4. üí≥ PRUEBAS DE CUENTAS" -ForegroundColor Yellow
try {
    $cuentas = Invoke-RestMethod -Uri "$baseUrl/api/cuentas" -Method GET
    Write-Host "‚úÖ Cuentas obtenidas: $($cuentas.Count) cuentas" -ForegroundColor Green
    
    # Cuenta espec√≠fica
    $cuenta1 = Invoke-RestMethod -Uri "$baseUrl/api/cuentas/1" -Method GET
    Write-Host "‚úÖ Cuenta 1: $($cuenta1.numeroCuenta) - Saldo: `$$($cuenta1.saldo)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error obteniendo cuentas: $($_.Exception.Message)" -ForegroundColor Red
}

# 5. Transacciones
Write-Host "`n5. üí∞ PRUEBAS DE TRANSACCIONES" -ForegroundColor Yellow
try {
    $transacciones = Invoke-RestMethod -Uri "$baseUrl/api/transacciones" -Method GET
    Write-Host "‚úÖ Transacciones obtenidas: $($transacciones.Count) transacciones" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error obteniendo transacciones: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "‚ö†Ô∏è Problema identificado en el controlador de transacciones" -ForegroundColor Yellow
}

# 6. Pr√©stamos
Write-Host "`n6. üè¶ PRUEBAS DE PR√âSTAMOS" -ForegroundColor Yellow
try {
    $prestamos = Invoke-RestMethod -Uri "$baseUrl/api/prestamos" -Method GET
    Write-Host "‚úÖ Pr√©stamos obtenidos: $($prestamos.Count) pr√©stamos" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error obteniendo pr√©stamos: $($_.Exception.Message)" -ForegroundColor Red
}

# 7. Configuraciones del Sistema
Write-Host "`n7. ‚öôÔ∏è PRUEBAS DE CONFIGURACI√ìN" -ForegroundColor Yellow

# Tipos de Cuenta
try {
    $tiposCuenta = Invoke-RestMethod -Uri "$baseUrl/api/tipos-cuenta" -Method GET
    Write-Host "‚úÖ Tipos de cuenta: $($tiposCuenta.Count) tipos disponibles" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error obteniendo tipos de cuenta: $($_.Exception.Message)" -ForegroundColor Red
}

# Sucursales
try {
    $sucursales = Invoke-RestMethod -Uri "$baseUrl/api/sucursales" -Method GET
    Write-Host "‚úÖ Sucursales: $($sucursales.Count) sucursales activas" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error obteniendo sucursales: $($_.Exception.Message)" -ForegroundColor Red
}

# Roles
try {
    $roles = Invoke-RestMethod -Uri "$baseUrl/api/roles" -Method GET
    Write-Host "‚úÖ Roles: $($roles.Count) roles del sistema" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error obteniendo roles: $($_.Exception.Message)" -ForegroundColor Red
}

# 8. Resumen Final
Write-Host "`n8. üìä RESUMEN DE PRUEBAS" -ForegroundColor Magenta
Write-Host "================================================" -ForegroundColor Cyan
Write-Host "‚úÖ FUNCIONANDO CORRECTAMENTE:" -ForegroundColor Green
Write-Host "   - Health Check del sistema" -ForegroundColor White
Write-Host "   - Autenticaci√≥n (login/logout)" -ForegroundColor White
Write-Host "   - Gesti√≥n de usuarios" -ForegroundColor White
Write-Host "   - Gesti√≥n de cuentas" -ForegroundColor White
Write-Host "   - Gesti√≥n de pr√©stamos" -ForegroundColor White
Write-Host "   - Tipos de cuenta" -ForegroundColor White
Write-Host "   - Sucursales" -ForegroundColor White
Write-Host "   - Roles del sistema" -ForegroundColor White

Write-Host "`n‚ùå PROBLEMAS IDENTIFICADOS:" -ForegroundColor Red
Write-Host "   - Controlador de transacciones (Error 500)" -ForegroundColor White

Write-Host "`nüéØ ENDPOINTS PROBADOS EXITOSAMENTE:" -ForegroundColor Cyan
Write-Host "   GET  /actuator/health" -ForegroundColor White
Write-Host "   POST /api/auth/login" -ForegroundColor White
Write-Host "   GET  /api/usuarios" -ForegroundColor White
Write-Host "   GET  /api/cuentas" -ForegroundColor White
Write-Host "   GET  /api/cuentas/{id}" -ForegroundColor White
Write-Host "   GET  /api/prestamos" -ForegroundColor White
Write-Host "   GET  /api/tipos-cuenta" -ForegroundColor White
Write-Host "   GET  /api/sucursales" -ForegroundColor White
Write-Host "   GET  /api/roles" -ForegroundColor White

Write-Host "`nüîß PR√ìXIMOS PASOS RECOMENDADOS:" -ForegroundColor Yellow
Write-Host "   1. Revisar y corregir el TransaccionController" -ForegroundColor White
Write-Host "   2. Probar operaciones POST/PUT/DELETE" -ForegroundColor White
Write-Host "   3. Implementar pruebas de autorizaci√≥n por roles" -ForegroundColor White
Write-Host "   4. Validar reglas de negocio espec√≠ficas" -ForegroundColor White

Write-Host "`nüéâ PRUEBAS COMPLETADAS!" -ForegroundColor Green
