# Script de PowerShell para verificar y corregir el problema de transacciones
# Autor: Sistema de Correcci√≥n Autom√°tica
# Fecha: 28 de mayo de 2025

Write-Host "=== VERIFICACI√ìN Y CORRECCI√ìN DEL PROBLEMA DE TRANSACCIONES ===" -ForegroundColor Cyan
Write-Host ""

# Funci√≥n para hacer peticiones HTTP
function Invoke-ApiCall {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [string]$Description
    )
    
    Write-Host "‚è≥ $Description..." -ForegroundColor Yellow
    
    try {
        if ($Method -eq "GET") {
            $response = Invoke-RestMethod -Uri $Url -Method GET -ContentType "application/json"
        } else {
            $response = Invoke-RestMethod -Uri $Url -Method POST -ContentType "application/json"
        }
        
        Write-Host "‚úÖ √âxito: $Description" -ForegroundColor Green
        return $response
    }
    catch {
        Write-Host "‚ùå Error: $Description" -ForegroundColor Red
        Write-Host "   Detalle: $($_.Exception.Message)" -ForegroundColor Gray
        return $null
    }
}

# Configuraci√≥n
$BaseUrl = "http://localhost:8081/api"
$Port = 8081

# Paso 1: Verificar que la aplicaci√≥n est√© ejecut√°ndose
Write-Host "üîç Verificando que la aplicaci√≥n est√© ejecut√°ndose en puerto $Port..."
try {
    $testConnection = Test-NetConnection -ComputerName localhost -Port $Port -WarningAction SilentlyContinue
    if (-not $testConnection.TcpTestSucceeded) {
        Write-Host "‚ùå La aplicaci√≥n no est√° ejecut√°ndose en puerto $Port" -ForegroundColor Red
        Write-Host "   Por favor, inicie la aplicaci√≥n con: mvn spring-boot:run" -ForegroundColor Yellow
        exit 1
    }
    Write-Host "‚úÖ Aplicaci√≥n ejecut√°ndose correctamente" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå No se puede verificar la conexi√≥n. Aseg√∫rese de que la aplicaci√≥n est√© ejecut√°ndose." -ForegroundColor Red
    exit 1
}

Write-Host ""

# Paso 2: Diagnosticar el problema
Write-Host "üìä PASO 1: DIAGN√ìSTICO" -ForegroundColor Magenta
Write-Host "=" * 50

$diagnostico = Invoke-ApiCall -Url "$BaseUrl/data-fix/diagnostico-transacciones" -Description "Diagnosticando problema de transacciones"

if ($diagnostico) {
    Write-Host "üìà Resultados del diagn√≥stico:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Transacciones con sucursal ID 0: $($diagnostico.transaccionesConSucursalCero)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Sucursales disponibles: $($diagnostico.sucursalesDisponibles.Count)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Transacciones problem√°ticas: $($diagnostico.transaccionesProblematicas.Count)" -ForegroundColor White
    
    if ($diagnostico.transaccionesConSucursalCero -gt 0) {
        Write-Host "‚ö†Ô∏è  Se encontraron $($diagnostico.transaccionesConSucursalCero) transacciones problem√°ticas" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ No se encontraron transacciones problem√°ticas" -ForegroundColor Green
    }
}

Write-Host ""

# Paso 3: Probar el endpoint original
Write-Host "üß™ PASO 2: PRUEBA DEL ENDPOINT ORIGINAL" -ForegroundColor Magenta
Write-Host "=" * 50

$transacciones = Invoke-ApiCall -Url "$BaseUrl/transacciones" -Description "Probando endpoint de transacciones"

if ($transacciones) {
    Write-Host "‚úÖ El endpoint de transacciones funciona correctamente" -ForegroundColor Green
    Write-Host "   üìä Se obtuvieron $($transacciones.Count) transacciones" -ForegroundColor White
} else {
    Write-Host "‚ùå El endpoint de transacciones tiene problemas. Procediendo con la correcci√≥n..." -ForegroundColor Red
    
    # Paso 4: Aplicar correcci√≥n
    Write-Host ""
    Write-Host "üîß PASO 3: APLICANDO CORRECCI√ìN" -ForegroundColor Magenta
    Write-Host "=" * 50
    
    $correccion = Invoke-ApiCall -Url "$BaseUrl/data-fix/corregir-sucursales" -Method "POST" -Description "Aplicando correcci√≥n autom√°tica"
    
    if ($correccion) {
        Write-Host "üéâ Correcci√≥n aplicada exitosamente:" -ForegroundColor Green
        Write-Host "   ‚Ä¢ Transacciones actualizadas: $($correccion.transaccionesActualizadas)" -ForegroundColor White
        Write-Host "   ‚Ä¢ Transacciones restantes con problema: $($correccion.transaccionesConSucursalCeroRestantes)" -ForegroundColor White
        
        # Paso 5: Verificar correcci√≥n
        Write-Host ""
        Write-Host "‚úîÔ∏è  PASO 4: VERIFICANDO CORRECCI√ìN" -ForegroundColor Magenta
        Write-Host "=" * 50
        
        Start-Sleep -Seconds 2  # Esperar un momento para que se aplique la correcci√≥n
        
        $transaccionesCorregidas = Invoke-ApiCall -Url "$BaseUrl/transacciones" -Description "Verificando endpoint despu√©s de la correcci√≥n"
        
        if ($transaccionesCorregidas) {
            Write-Host "üéä ¬°√âXITO! El problema ha sido corregido." -ForegroundColor Green
            Write-Host "   üìä Transacciones obtenidas correctamente: $($transaccionesCorregidas.Count)" -ForegroundColor White
        } else {
            Write-Host "‚ö†Ô∏è  El problema persiste. Revisar logs de la aplicaci√≥n." -ForegroundColor Yellow
        }
    }
}

Write-Host ""
Write-Host "üìã RESUMEN FINAL" -ForegroundColor Magenta
Write-Host "=" * 50

if ($transacciones -or $transaccionesCorregidas) {
    Write-Host "‚úÖ Estado: PROBLEMA RESUELTO" -ForegroundColor Green
    Write-Host "‚úÖ El endpoint /api/transacciones funciona correctamente" -ForegroundColor Green
    Write-Host "‚úÖ Los datos est√°n consistentes" -ForegroundColor Green
} else {
    Write-Host "‚ùå Estado: PROBLEMA PERSISTE" -ForegroundColor Red
    Write-Host "‚ùå Revisar logs de la aplicaci√≥n" -ForegroundColor Red
    Write-Host "‚ùå Considerar ejecutar el script SQL manualmente" -ForegroundColor Red
}

Write-Host ""
Write-Host "üìö Para m√°s informaci√≥n, revisar: SOLUCION_ERROR_TRANSACCIONES.md" -ForegroundColor Cyan
Write-Host "üîß Endpoints de diagn√≥stico disponibles en: /api/data-fix/" -ForegroundColor Cyan

Write-Host ""
Write-Host "Script completado." -ForegroundColor White
